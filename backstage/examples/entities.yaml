---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-system
apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  name: examples
spec:
  owner: guests

---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: example-website
spec:
  type: website
  lifecycle: experimental
  owner: guests
  system: examples
  providesApis: [example-grpc-api]

---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-api
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: example-grpc-api
spec:
  type: grpc
  lifecycle: experimental
  owner: guests
  system: examples
  definition: |
    syntax = "proto3";

    service Exampler {
      rpc Example (ExampleMessage) returns (ExampleMessage) {};
    }

    message ExampleMessage {
      string example = 1;
    };



---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-system
apiVersion: backstage.io/v1alpha1
kind: System
metadata:
  name: system-b
spec:
  owner: admins
---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-component
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: example-website-b
spec:
  type: website
  lifecycle: experimental
  owner: admins
  system: system-b
  providesApis: [example-grpc-api]
---
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-api
apiVersion: backstage.io/v1alpha1
kind: API
metadata:
  name: example-grpc-api-b
spec:
  type: grpc
  lifecycle: experimental
  owner: admins
  system: system-b
  definition: |
    syntax = "proto3";
    package api;
    message Request {
        string id = 1;
        string data = 2;
        string created_at = 3;
    }
    message RequestList {
        repeated Request requests = 1;
    }
    message RequestStatus {
        string id = 1;
        string status = 2;
    }
    service RequestService {
        rpc GetRequests (Empty) returns (RequestList);
        rpc CreateRequest (Request) returns (Request);
        rpc UpdateRequest (Request) returns (Request);
        rpc GetRequestStatus (Request) returns (RequestStatus);
    }

    message Empty {}
